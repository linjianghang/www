<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2017/3/17
 * Time: 16:16
 */
namespace app\index\controller;

use app\index\model\Users;
use think\Config;
use think\Controller;
use think\Db;
use think\Loader;
use think\Request;
use think\Route;
use think\View;

class User extends Controller
{
    //前置操作
    protected $beforeActionList = [
//        'first',
//        'three',
    ];
    public function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        Config::set(['default_return_type'=>'json']);//方法中设置配置 返回的数据格式
    }
    public function _empty(){
        return $this->default_view();//访问不到是跳到这个页面
    }
    public function default_view(){
        echo "没有这个页面哦！";
    }
    public function first(){
        echo "first<br>";
    }
    public function three(){
        echo 'three<br>';
    }
    public function hello(){
        $this->success('新增成功', 'User/index');
    }
    public function index(){
//        $m = new \app\index\model\UserModel();
//        $data = $m->getlist();
//        return $data;
        $data = ['name'=>'thinkphp','url'=>'thinkphp.cn'];
        return json(['data'=>$data,'code'=>1,'message'=>'操作完成']);
    }
    public function demo(){
        $data = array_merge($_GET,$_POST);
        Route::get('/',function(){
            return 'Hello,world!';
        });
        Config::set(['default_return_type'=>'json']);//方法中设置配置 返回的数据格式
        $data = ['name'=>'thinkphp','url'=>'thinkphp.cn'];
        return ['data'=>$data,'code'=>1,'message'=>'操作完成'];
    }
    public function getInfo(Request $request,$name){
        echo $name;
    }
    public function view(){
//        $view = new View();
//        return $view->fetch('view');
        return view();
    }
    public function select(){
        $data = Db::table('demo_user')->value('username');//返回某个字段  返回一个
        $data = Db::table('demo_user')->column('username');//查询出指定字段
        $data = Db::table('demo_user')->find();//查询一条 相当于one
        $data = Db::table('demo_user')->select();//查询多条 相当于all
        $data = Db::table('demo_user')->where('status',0)->find();//条件
        $data = Db::table('demo_user')->where(['status'=>0])->select();//条件
        $data = Db::table('demo_user')->where(['status'=>0])->whereOr(['status'=>1])->select();//条件 OR
        $data = Db::table('demo_user')->where('id','between','1,3')->select();//查 1 到 3
        $data = Db::table('demo_user')->where('username','like',['%ad%','%个%'],'or')->select();//模糊查询 数组
        $data = Db::table('demo_user')->where('username','not in','admin')->select();//not in
        $data = Db::table('demo_user')->where('username',null)->select();//为null
        $data = Db::table('demo_user')->where('username','null')->select();//为null
        $data = Db::table('demo_user')->where('username','not null')->select();//不为null
        $data = Db::table('demo_user')->where('id','in','1,2')->select();//in
        $data = Db::table('demo_user')->where('id','in',['1','2'])->order('id desc')->select();//in order 排序 order by
        $data = Db::table('demo_user')->where('id','in',['1','2'])->count();//count
        $data = Db::table('demo_user')->where('id','in',['1','2'])->max('id');//max
        $data = Db::table('demo_user')->where('id','in',['1','2'])->min('id');//min
        $data = Db::table('demo_user')->where('id','in',['1','2'])->avg('id');//字段平均值
        $data = Db::table('demo_user')->where('id','in',['1','2'])->sum('id');//sum
        $data = Db::table('demo_user')->where('time','> time','2017-6-12')->select();//时间
        $data = Db::table('demo_user')->where('time','between time',['2017-6-1','2017-6-12'])->select();
        $data = Db::table('demo_user')->whereTime('time','>','2017-6-1')->select();
        $data = Db::table('demo_user')->whereTime('time','between',['2017-6-1','2017-6-10'])->select();
        $data = Db::table('demo_user')->whereTime('time','today')->select();//今天 d
        $data = Db::table('demo_user')->whereTime('time','yesterday')->select();//昨天
        $data = Db::table('demo_user')->whereTime('time','week')->select();//本周 w
        $data = Db::table('demo_user')->whereTime('time','last week')->select();//上周
        $data = Db::table('demo_user')->whereTime('time','month')->select();//本月 m
        $data = Db::table('demo_user')->whereTime('time','last month')->select();//上月
        $data = Db::table('demo_user')->whereTime('time','year')->select();//今年 y
        $data = Db::table('demo_user')->whereTime('time','last year')->select();//去年
        $data = Db::table('demo_user')->whereTime('time','-2 hours')->select();//两个小时内
        $data = Db::table('demo_user')->where('id',['>',0],['<>',2],['<>',1],'and')->select();//区间查询
        return $data;
    }
    public function insert(){
        $data=['username'=>'豆腐渣渣','password'=>'123456','age'=>22,'sex'=>0];
//        $res = Db::name('demo_user')->insert($data);//新增
//        $res = Db::table('demo_user')->insert($data);//新增
        $res = Db::table('demo_user')->insertGetId($data);//新增并返回主键值
        if($res){
            return "写入成功";
        }else{
            return "写入失败";
        }
    }
    public function update(){
//        $res = Db::table('demo_user')->where(['id'=>2])->update(['username'=>'修改名字']);
//        $res = Db::table('demo_user')->update(['username'=>'修改名字','password'=>233,'id'=>2,'sex'=>233]);//存在主键时
//        $res = Db::table('demo_user')->setField(['username'=>'某个','id'=>2]);//更新某个字段
//        $res = Db::table('demo_user')->where(['id'=>2])->setInc('sex');//字段加一
//        $res = Db::table('demo_user')->where(['id'=>2])->setInc('sex',5);//字段加五
//        $res = Db::table('demo_user')->where(['id'=>2])->setDec('sex');//字段减一
//        $res = Db::table('demo_user')->where(['id'=>2])->setDec('sex',5);//字段减五
          $res = Db::table('demo_user')->where(['id'=>2])->setInc('sex',5,10);//延迟更新s
        if($res){
            return "更新成功";
        }else{
            return "更新成功";
        }
    }
    public function delete(){
//        $res = Db::table('demo_user')->where(['id'=>5])->delete();
        $res = Db::table('demo_user')->delete(4);//有主键时
        if($res){
            return "删除成功";
        }else{
            return "删除成功";
        }
    }
    public function request(){
        $request = Request::instance();
        $data = $request->get('name');//获取get name
        $data = $request->except('name');//获取所有  排除name
        $data = $request->only(['id','name'],'get');//只获取GET请求的id和name变量
        $data = $request->get();//获取所有get
        $data = $request->post();//获取所有post
        $data = $request->param();//获取所有
        $data = $request->get(['name'=>'233']);//更改GET变量
        $data = $request->post(['name'=>'233']);//更改get变量
        var_dump($data);exit;
    }
    public function model(){
        // 静态调用
//        $user = \app\index\model\User::get(1);//获取id为1 的数据 修改
//        $user->username = 'thinkphp1';
//        $res = $user->save();
        // 实例化模型 添加
//        $user = new \app\index\model\User();
//        $user->username = '豆腐渣渣';
//        $user->password = '123456';
//        $user->age = 18;
//        $user->sex = 0;
//        $user->time = date('Y-m-d H:i:s',time());
//        $res = $user->save();
        // 使用 Loader 类实例化（单例）
//        $user = Loader::model('User');
        // 或者使用助手函数`model`
//        $user = model('User');
//        $user->username= 'zz';
//        $user->password = '123456';
//        $user->age = 18;
//        $user->sex = 0;
//        $user->time = date('Y-m-d H:i:s',time());
//        $res = $user->save();
        //添加数据
//        $user = new \app\index\model\User();
//        $user -> data([
//            'username'=>'data',
//            'password'=>'123456',
//            'age'=>18,
//            'sex'=>0,
//            'time'=>date('Y-m-d H:i:s',time()),
//        ]);
//        $res = $user->save();
//        $res_id = $user->id;
        //添加多条数据
//        $user = new \app\index\model\User();
//        $list = [
//            ['username'=>'one1','password'=>'123456','time'=>date('Y-m-d H:i:s',time())],
//            ['username'=>'two1','password'=>'123456','time'=>date('Y-m-d H:i:s',time())],
//        ];
//        $res = $user->saveAll($list,false);
        //直接静态调用create方法创建并写入
//        $user = \app\index\model\User::create([
//            'username'  =>  'thinkphplianxi',
//            'password' =>  'thinkphp@qq.com',
//            'time' =>  date('Y-m-d H:i:s',time())
//        ]);
        //也可以直接带更新条件来更新数据
//        $user = new \app\index\model\User();
//        // save方法第二个参数为更新条件
//        $res = $user->save([
//            'username'  => '修改',
//            'time' =>date('Y-m-d H:i:s',time())
//        ],['id' => 1]);
        //批量更新数据
//        $user = new Users();
//        $list = [
//            ['id'=>1,'username'=>'批量修改1'],
//            ['id'=>3,'username'=>'批量修改3']
//        ];
//        $res = $user->saveAll($list);
        //删除数据
//        $user = Users::get(20);
//        $res = $user->delete();
        //or
//        $res = Users::destroy(19);
        // 支持批量删除多个数据
//        $res = Users::destroy('17,18');
        // 或者
//        $res = Users::destroy([17,18]);
        // 删除状态为0的数据
//        $res = Users::destroy(['status' => 0]);
//        还支持使用闭包删除
//        $res = Users::destroy(function($query){
//            $query->where('id','>=',17);
//        });
//        $res = Users::where('id','>=',16)->delete();
        //查询
//        $res = Users::get(1);
//        $res = Users::all('1,2,3');
//        $res = Users::all(['1','2','3']);
//        $res = Users::all(['status'=>0]);
        // 获取某个用户的积分
//        $res = Users::where('id',1)->value('username');
        // 获取某个列的所有值
//        $res = Users::where('status',1)->column('username');
        // 以id为索引
//        $res = Users::where('status',0)->column('username','id');
         // 根据name字段查询用户
//        $res = Users::getByUsername('豆腐渣渣');
        //统计
//        $res = Users::where(['id'=>1])->count();
//        $res = Users::where(['status'=>1])->avg('id');
        $res = Users::where(['status'=>0])->max('id');
        var_dump($res);exit;
    }
    public function view_display(){
//        return $this->fetch('view');
//        $view = new view();
//        return $view->fetch('view');
        return view('view');
    }
    public function addss(){
        var_dump(Request::instance()->post());exit;
    }
}